{
  "instances": [
    {
      "phetioID": "phetio",
      "typeName": "TPhETIO"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald.assertiveElementProperty",
      "typeName": "TProperty.<TString>"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald.politeElementProperty",
      "typeName": "TProperty.<TString>"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald.assertiveAlertElementProperty",
      "typeName": "TProperty.<TString>"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald.politeStatusElementProperty",
      "typeName": "TProperty.<TString>"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald.alertsVisibleProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald.alertsEnabledProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.ariaHerald",
      "typeName": "TAriaHerald"
    },
    {
      "phetioID": "faradaysLaw.display.focusProperty",
      "typeName": "TProperty.<TFocus>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.activeProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen",
      "typeName": "TScreen"
    },
    {
      "phetioID": "faradaysLaw.sim.frameEndedEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.sim.showHomeScreenProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.sim.screenIndexProperty",
      "typeName": "TProperty.<TNumber>"
    },
    {
      "phetioID": "faradaysLaw.sim.activeProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.browserTabVisibleProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.sim",
      "typeName": "TSim"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.titleTextNode",
      "typeName": "TText"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu.screenshotMenuItem.textNode",
      "typeName": "TText"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu.screenshotMenuItem",
      "typeName": "TMenuItem"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu.fullScreenMenuItem.textNode",
      "typeName": "TText"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu.fullScreenMenuItem",
      "typeName": "TMenuItem"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu.aboutMenuItem.textNode",
      "typeName": "TText"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu.aboutMenuItem",
      "typeName": "TMenuItem"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.phetMenu",
      "typeName": "TPhetMenu"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.startedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton.endedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.phetButton",
      "typeName": "TJoistButton"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.keyboardHelpButton.startedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.keyboardHelpButton.endedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.navigationBar.keyboardHelpButton",
      "typeName": "TJoistButton"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.showSecondCoilProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.showMagnetArrowsProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.magnetModel.positionProperty",
      "typeName": "TProperty.<TVector2>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.magnetModel.flippedProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.magnetModel.showFieldLinesProperty",
      "typeName": "TProperty.<TBoolean>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.voltmeterModel.thetaProperty",
      "typeName": "TProperty.<TNumber>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.model.voltmeterModel.signalProperty",
      "typeName": "TProperty.<TNumber>"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.voltmeterNode.voltmeterScale.needleArrowNode",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.resetAllButton.startedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.resetAllButton.endedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.resetAllButton",
      "typeName": "TResetAllButton"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.flipMagnetButton.startedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.flipMagnetButton.endedCallbacksForFiredEmitter",
      "typeName": "TEmitter"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.flipMagnetButton",
      "typeName": "TPushButton"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.radioButtonGroup.singleCoilRadioButton",
      "typeName": "TRadioButtonGroupMember"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.radioButtonGroup.doubleCoilRadioButton",
      "typeName": "TRadioButtonGroupMember"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.radioButtonGroup",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.controlPanel.showFieldCheckBox",
      "typeName": "TCheckBox"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.magnet",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.magnet.magnetTopArrowNode",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.magnet.magnetBottomArrowNode",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.magnet.magnetRightArrowNode",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.magnet.magnetLeftArrowNode",
      "typeName": "TNode"
    },
    {
      "phetioID": "faradaysLaw.faradaysLawScreen.view.magnet.dragHandler",
      "typeName": "TSimpleDragHandler"
    },
    {
      "phetioID": "faradaysLaw.sim.barrierRectangle",
      "typeName": "TBarrierRectangle"
    }
  ],
  "types": {
    "TPhETIO": {
      "methods": {
        "getValues": {
          "returnType": "TObject",
          "parameterTypes": [
            "TArray"
          ],
          "documentation": "Get the current values for multiple Property/DerivedProperty at the same time.  Useful for collecting data to be plotted, so values will be consistent."
        },
        "rasterizeDisplay": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString>"
          ],
          "documentation": "Rasterize the display, asynchronously"
        },
        "addInstanceAddedListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString, TString, TObjectState>"
          ],
          "documentation": "Adds a listener that receives a callback whenever a new sim instance has been prepared for interoperability"
        },
        "addInstanceRemovedListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString, TString>"
          ],
          "documentation": "Removes a listener that was added with addInstanceAddedListener"
        },
        "addPhETIOEventsListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString>"
          ],
          "documentation": "Adds a listener to the phetioEvents event channel, for data analysis"
        },
        "setInteractive": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Sets whether the sim can be interacted with (via mouse/touch)."
        },
        "isInteractive": {
          "returnType": "TBoolean",
          "parameterTypes": [],
          "documentation": "Gets whether the sim can be interacted with (via mouse/touch)."
        },
        "setPlaybackMode": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Disable the sim clock driver so that time will only pass as it is played back from a log file."
        },
        "stepSimulation": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "Steps one frame of the simulation."
        },
        "invokeInputEvent": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TString"
          ],
          "documentation": "Plays back a recorded input event into the simulation."
        },
        "getPhETIOIDs": {
          "returnType": "TArray",
          "parameterTypes": [],
          "documentation": "Gets a list of all of the wrapped instances which are available for interoperability."
        },
        "getState": {
          "returnType": "TObject",
          "parameterTypes": [],
          "documentation": "Gets the full state of the simulation"
        },
        "setState": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TObject"
          ],
          "documentation": "Sets the full state of the simulation"
        },
        "startEvent": {
          "returnType": "TNumber",
          "parameterTypes": [
            "TObject"
          ],
          "documentation": "Begin a message"
        },
        "endEvent": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "End a message"
        },
        "triggerEvent": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TObject"
          ],
          "documentation": "Start and end a message. Excepted properties of the argument: eventType, phetioID, componentType, event, parameters. See phetioEvents.trigger for more information."
        },
        "addExpressions": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TArray"
          ],
          "documentation": "Set expressions to take effect before the simulation is launched, similar to phetioExpressions, see TObject"
        },
        "launchSimulation": {
          "returnType": "TVoid",
          "parameterTypes": [],
          "documentation": "Finish launching the simulation, called from a wrapper after all cross-frame initialization is complete"
        },
        "getRandomSeed": {
          "returnType": "TNumber",
          "parameterTypes": [],
          "documentation": "Get the random seed, used for replicable playbacks"
        },
        "setRandomSeed": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "Set the random seed, used for replicable playbacks"
        },
        "setDisplaySize": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber",
            "TNumber"
          ],
          "documentation": "set the size of the visible region for the simulation"
        },
        "setSimStartedMetadata": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TObject"
          ],
          "documentation": "Set additional data that is added to the simStarted event."
        },
        "simulateError": {
          "returnType": "TVoid",
          "parameterTypes": [],
          "documentation": "Simulate an error for testing purposes"
        },
        "getQueryParameters": {
          "returnType": "TObject",
          "parameterTypes": [],
          "documentation": "get the keys and values of all phet and phet-io query parameters used by the sim"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TPhETIO",
      "documentation": "Mediator for the phet-io module, with systemwide methods for communicating with the sim or other globals",
      "events": [
        "simStarted",
        "state",
        "stateDelta",
        "frameCompleted",
        "stepSimulation",
        "inputEvent",
        "displaySize"
      ],
      "instanceDocumentation": ""
    },
    "TProperty.<TString>": {
      "methods": {
        "getValue": {
          "returnType": "TString",
          "parameterTypes": [],
          "documentation": "Gets the current value."
        },
        "setValue": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TString"
          ],
          "documentation": "Sets the value of the property, and triggers notifications if the value is different"
        },
        "link": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString, TString>"
          ],
          "documentation": "Add a listener which will be called when the value changes.  The listener also gets an immediate callback with the current value."
        },
        "lazyLink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString, TString>"
          ],
          "documentation": "Add a listener which will be called when the value changes, but not for the initial value."
        },
        "unlink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString>"
          ],
          "documentation": "Removes a listener"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TProperty.<TString>",
      "documentation": "Model values that can send out notifications when the value changes. This is different from the traditional listener pattern in that listeners also receive a callback with the current value when the listeners are registered.",
      "events": [
        "changed"
      ],
      "instanceDocumentation": "This Property is read-only, do not attempt to set its value.",
      "typeAPI": {
        "valueType": {
          "methods": {},
          "supertype": {
            "methods": {},
            "supertype": null,
            "typeName": "TObject",
            "documentation": "The root of the wrapper object hierarchy",
            "events": [],
            "instanceDocumentation": ""
          },
          "typeName": "TString",
          "documentation": "Wrapper for the built-in JS string type",
          "events": [],
          "instanceDocumentation": ""
        }
      }
    },
    "TProperty.<TBoolean>": {
      "methods": {
        "getValue": {
          "returnType": "TBoolean",
          "parameterTypes": [],
          "documentation": "Gets the current value."
        },
        "setValue": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Sets the value of the property, and triggers notifications if the value is different"
        },
        "link": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TBoolean, TBoolean>"
          ],
          "documentation": "Add a listener which will be called when the value changes.  The listener also gets an immediate callback with the current value."
        },
        "lazyLink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TBoolean, TBoolean>"
          ],
          "documentation": "Add a listener which will be called when the value changes, but not for the initial value."
        },
        "unlink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TBoolean>"
          ],
          "documentation": "Removes a listener"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TProperty.<TBoolean>",
      "documentation": "Model values that can send out notifications when the value changes. This is different from the traditional listener pattern in that listeners also receive a callback with the current value when the listeners are registered.",
      "events": [
        "changed"
      ],
      "instanceDocumentation": "",
      "typeAPI": {
        "valueType": {
          "methods": {},
          "supertype": {
            "methods": {},
            "supertype": null,
            "typeName": "TObject",
            "documentation": "The root of the wrapper object hierarchy",
            "events": [],
            "instanceDocumentation": ""
          },
          "typeName": "TBoolean",
          "documentation": "Wrapper for the built-in JS boolean type (true/false)",
          "events": [],
          "instanceDocumentation": ""
        }
      }
    },
    "TAriaHerald": {
      "methods": {
        "announcePolite": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TString",
            "TBoolean"
          ],
          "documentation": "Set the polite aria-live attribute in the sim frame's PDOM."
        },
        "setEnabled": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Set whether the ariaHerald will be enabled."
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TAriaHerald",
      "documentation": "Interfacing type to handle Aria alerts via the aria-live attribute.",
      "events": [],
      "instanceDocumentation": ""
    },
    "TProperty.<TFocus>": {
      "methods": {
        "getValue": {
          "returnType": "TFocus",
          "parameterTypes": [],
          "documentation": "Gets the current value."
        },
        "setValue": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFocus"
          ],
          "documentation": "Sets the value of the property, and triggers notifications if the value is different"
        },
        "link": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TFocus, TFocus>"
          ],
          "documentation": "Add a listener which will be called when the value changes.  The listener also gets an immediate callback with the current value."
        },
        "lazyLink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TFocus, TFocus>"
          ],
          "documentation": "Add a listener which will be called when the value changes, but not for the initial value."
        },
        "unlink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TFocus>"
          ],
          "documentation": "Removes a listener"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TProperty.<TFocus>",
      "documentation": "Model values that can send out notifications when the value changes. This is different from the traditional listener pattern in that listeners also receive a callback with the current value when the listeners are registered.",
      "events": [
        "changed"
      ],
      "instanceDocumentation": "",
      "typeAPI": {
        "valueType": {
          "methods": {},
          "supertype": {
            "methods": {},
            "supertype": null,
            "typeName": "TObject",
            "documentation": "The root of the wrapper object hierarchy",
            "events": [],
            "instanceDocumentation": ""
          },
          "typeName": "TFocus",
          "documentation": "A wrapper type for the instance in the simulation which currently has keyboard focus.",
          "events": [],
          "instanceDocumentation": ""
        }
      }
    },
    "TScreen": {
      "methods": {},
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TScreen",
      "documentation": "A single screen for a PhET simulation",
      "events": [],
      "instanceDocumentation": ""
    },
    "TEmitter": {
      "methods": {
        "addListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<>"
          ],
          "documentation": "Add a listener which will be called when the emitter emits."
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TEmitter",
      "documentation": "Emitters indicate when events have occurred, with optional arguments describing the event",
      "events": [
        "emitted"
      ],
      "instanceDocumentation": ""
    },
    "TProperty.<TNumber>": {
      "methods": {
        "getValue": {
          "returnType": "TNumber",
          "parameterTypes": [],
          "documentation": "Gets the current value."
        },
        "setValue": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "Sets the value of the property, and triggers notifications if the value is different"
        },
        "link": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TNumber, TNumber>"
          ],
          "documentation": "Add a listener which will be called when the value changes.  The listener also gets an immediate callback with the current value."
        },
        "lazyLink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TNumber, TNumber>"
          ],
          "documentation": "Add a listener which will be called when the value changes, but not for the initial value."
        },
        "unlink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TNumber>"
          ],
          "documentation": "Removes a listener"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TProperty.<TNumber>",
      "documentation": "Model values that can send out notifications when the value changes. This is different from the traditional listener pattern in that listeners also receive a callback with the current value when the listeners are registered.",
      "events": [
        "changed"
      ],
      "instanceDocumentation": "",
      "typeAPI": {
        "valueType": {
          "methods": {},
          "supertype": {
            "methods": {},
            "supertype": null,
            "typeName": "TObject",
            "documentation": "The root of the wrapper object hierarchy",
            "events": [],
            "instanceDocumentation": ""
          },
          "typeName": "TNumber",
          "documentation": "Wrapper for the built-in JS number type (floating point, but also represents integers)",
          "events": [],
          "instanceDocumentation": "",
          "typeAPI": {}
        }
      }
    },
    "TSim": {
      "methods": {
        "disableRequestAnimationFrame": {
          "returnType": "TVoid",
          "parameterTypes": [],
          "documentation": "Prevents the simulation from animating/updating"
        },
        "addEventListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TString",
            "TFunctionWrapper.<TString, TFunctionWrapper.<>>"
          ],
          "documentation": "Add an event listener to the sim instance"
        },
        "getScreenshotDataURL": {
          "returnType": "TString",
          "parameterTypes": [],
          "documentation": "Gets a base64 representation of a screenshot of the simulation as a data url"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TSim",
      "documentation": "The type for the simulation instance",
      "events": [
        "simStarted"
      ],
      "instanceDocumentation": ""
    },
    "TText": {
      "methods": {
        "addTextChangedListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TString>"
          ],
          "documentation": "Add a listener for when the text has changed."
        },
        "setText": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TString"
          ],
          "documentation": "Set the text content"
        },
        "getText": {
          "returnType": "TString",
          "parameterTypes": [],
          "documentation": "Get the text content"
        },
        "setFontOptions": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFont"
          ],
          "documentation": "Set font options for this TText instance, e.g. {size: 16, weight: bold}"
        },
        "getFontOptions": {
          "returnType": "TFont",
          "parameterTypes": [],
          "documentation": "Get font options for this TText instance as an object"
        },
        "setMaxWidth": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "Set maximum width of text box in px. If text is wider than maxWidth at its default font size, it is scaled down to fit."
        },
        "getMaxWidth": {
          "returnType": "TNumber",
          "parameterTypes": [],
          "documentation": "Get maximum width of text box in px"
        }
      },
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TText",
      "documentation": "The tandem wrapper type for the scenery Text node",
      "events": [
        "textChanged"
      ],
      "instanceDocumentation": ""
    },
    "TMenuItem": {
      "methods": {},
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TMenuItem",
      "documentation": "The item buttons shown in a popup menu",
      "events": [
        "fired"
      ],
      "instanceDocumentation": ""
    },
    "TPhetMenu": {
      "methods": {},
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TPhetMenu",
      "documentation": "The PhET Menu in the bottom right of the screen",
      "events": [],
      "instanceDocumentation": ""
    },
    "TJoistButton": {
      "methods": {},
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TJoistButton",
      "documentation": "The buttons used in the home screen and navigation bar",
      "events": [
        "fired"
      ],
      "instanceDocumentation": ""
    },
    "TProperty.<TVector2>": {
      "methods": {
        "getValue": {
          "returnType": "TVector2",
          "parameterTypes": [],
          "documentation": "Gets the current value."
        },
        "setValue": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TVector2"
          ],
          "documentation": "Sets the value of the property, and triggers notifications if the value is different"
        },
        "link": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TVector2, TVector2>"
          ],
          "documentation": "Add a listener which will be called when the value changes.  The listener also gets an immediate callback with the current value."
        },
        "lazyLink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TVector2, TVector2>"
          ],
          "documentation": "Add a listener which will be called when the value changes, but not for the initial value."
        },
        "unlink": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TVector2>"
          ],
          "documentation": "Removes a listener"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TProperty.<TVector2>",
      "documentation": "Model values that can send out notifications when the value changes. This is different from the traditional listener pattern in that listeners also receive a callback with the current value when the listeners are registered.",
      "events": [
        "changed"
      ],
      "instanceDocumentation": "",
      "typeAPI": {
        "valueType": {
          "methods": {},
          "supertype": {
            "methods": {},
            "supertype": null,
            "typeName": "TObject",
            "documentation": "The root of the wrapper object hierarchy",
            "events": [],
            "instanceDocumentation": ""
          },
          "typeName": "TVector2",
          "documentation": "A numerical object with x/y scalar values",
          "events": [],
          "instanceDocumentation": ""
        }
      }
    },
    "TNode": {
      "methods": {
        "detach": {
          "returnType": "TVoid",
          "parameterTypes": [],
          "documentation": "Detaches the node from its parents (if any)"
        },
        "isVisible": {
          "returnType": "TBoolean",
          "parameterTypes": [],
          "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
        },
        "setVisible": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Set whether the node will be visible (and interactive)"
        },
        "setPickable": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Set whether the node will be pickable (and hence interactive)"
        },
        "isPickable": {
          "returnType": "TBoolean",
          "parameterTypes": [],
          "documentation": "Gets whether the node is pickable (and hence interactive)"
        },
        "addPickableListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TBoolean>"
          ],
          "documentation": "Adds a listener for when pickability of the node changes"
        },
        "addVisibleListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TBoolean>"
          ],
          "documentation": "Adds a listener for when visibility of the node changes"
        },
        "setOpacity": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "Set opacity between 0-1 (inclusive)"
        },
        "setRotation": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TNumber"
          ],
          "documentation": "Set the rotation of the node, in radians"
        }
      },
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TNode",
      "documentation": "The base type for graphical and potentially interactive objects",
      "events": [],
      "instanceDocumentation": ""
    },
    "TResetAllButton": {
      "methods": {},
      "supertype": {
        "methods": {
          "addListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<>"
            ],
            "documentation": "Adds a listener that is called back when the button is pressed."
          },
          "fire": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Performs the action associated with the button"
          }
        },
        "supertype": {
          "methods": {
            "detach": {
              "returnType": "TVoid",
              "parameterTypes": [],
              "documentation": "Detaches the node from its parents (if any)"
            },
            "isVisible": {
              "returnType": "TBoolean",
              "parameterTypes": [],
              "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
            },
            "setVisible": {
              "returnType": "TVoid",
              "parameterTypes": [
                "TBoolean"
              ],
              "documentation": "Set whether the node will be visible (and interactive)"
            },
            "setPickable": {
              "returnType": "TVoid",
              "parameterTypes": [
                "TBoolean"
              ],
              "documentation": "Set whether the node will be pickable (and hence interactive)"
            },
            "isPickable": {
              "returnType": "TBoolean",
              "parameterTypes": [],
              "documentation": "Gets whether the node is pickable (and hence interactive)"
            },
            "addPickableListener": {
              "returnType": "TVoid",
              "parameterTypes": [
                "TFunctionWrapper.<TBoolean>"
              ],
              "documentation": "Adds a listener for when pickability of the node changes"
            },
            "addVisibleListener": {
              "returnType": "TVoid",
              "parameterTypes": [
                "TFunctionWrapper.<TBoolean>"
              ],
              "documentation": "Adds a listener for when visibility of the node changes"
            },
            "setOpacity": {
              "returnType": "TVoid",
              "parameterTypes": [
                "TNumber"
              ],
              "documentation": "Set opacity between 0-1 (inclusive)"
            },
            "setRotation": {
              "returnType": "TVoid",
              "parameterTypes": [
                "TNumber"
              ],
              "documentation": "Set the rotation of the node, in radians"
            }
          },
          "supertype": {
            "methods": {},
            "supertype": null,
            "typeName": "TObject",
            "documentation": "The root of the wrapper object hierarchy",
            "events": [],
            "instanceDocumentation": ""
          },
          "typeName": "TNode",
          "documentation": "The base type for graphical and potentially interactive objects",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TPushButton",
        "documentation": "A pressable button in the simulation",
        "events": [
          "fired"
        ],
        "instanceDocumentation": ""
      },
      "typeName": "TResetAllButton",
      "documentation": "The round (typically orange) button that restores the simulation screen to its initial state",
      "events": [
        "reset"
      ],
      "instanceDocumentation": ""
    },
    "TPushButton": {
      "methods": {
        "addListener": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<>"
          ],
          "documentation": "Adds a listener that is called back when the button is pressed."
        },
        "fire": {
          "returnType": "TVoid",
          "parameterTypes": [],
          "documentation": "Performs the action associated with the button"
        }
      },
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TPushButton",
      "documentation": "A pressable button in the simulation",
      "events": [
        "fired"
      ],
      "instanceDocumentation": ""
    },
    "TRadioButtonGroupMember": {
      "methods": {},
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TRadioButtonGroupMember",
      "documentation": "A traditional radio button",
      "events": [
        "fired"
      ],
      "instanceDocumentation": ""
    },
    "TCheckBox": {
      "methods": {
        "link": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TFunctionWrapper.<TBoolean>"
          ],
          "documentation": "Link a listener to the underlying checked TProperty.  The listener receives an immediate callback with the current value (true/false)"
        },
        "setChecked": {
          "returnType": "TVoid",
          "parameterTypes": [
            "TBoolean"
          ],
          "documentation": "Sets whether the checkbox is checked or not"
        },
        "isChecked": {
          "returnType": "TBoolean",
          "parameterTypes": [],
          "documentation": "Returns true if the checkbox is checked, false otherwise"
        }
      },
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TCheckBox",
      "documentation": "A traditional checkbox",
      "events": [
        "toggled"
      ],
      "instanceDocumentation": ""
    },
    "TSimpleDragHandler": {
      "methods": {},
      "supertype": {
        "methods": {},
        "supertype": null,
        "typeName": "TObject",
        "documentation": "The root of the wrapper object hierarchy",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TSimpleDragHandler",
      "documentation": "Drag listener for objects that can be dragged by the user.",
      "events": [
        "dragStarted",
        "dragged",
        "dragEnded"
      ],
      "instanceDocumentation": ""
    },
    "TBarrierRectangle": {
      "methods": {},
      "supertype": {
        "methods": {
          "detach": {
            "returnType": "TVoid",
            "parameterTypes": [],
            "documentation": "Detaches the node from its parents (if any)"
          },
          "isVisible": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets a Boolean value indicating whether the node can be seen and interacted with"
          },
          "setVisible": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be visible (and interactive)"
          },
          "setPickable": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TBoolean"
            ],
            "documentation": "Set whether the node will be pickable (and hence interactive)"
          },
          "isPickable": {
            "returnType": "TBoolean",
            "parameterTypes": [],
            "documentation": "Gets whether the node is pickable (and hence interactive)"
          },
          "addPickableListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when pickability of the node changes"
          },
          "addVisibleListener": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TFunctionWrapper.<TBoolean>"
            ],
            "documentation": "Adds a listener for when visibility of the node changes"
          },
          "setOpacity": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set opacity between 0-1 (inclusive)"
          },
          "setRotation": {
            "returnType": "TVoid",
            "parameterTypes": [
              "TNumber"
            ],
            "documentation": "Set the rotation of the node, in radians"
          }
        },
        "supertype": {
          "methods": {},
          "supertype": null,
          "typeName": "TObject",
          "documentation": "The root of the wrapper object hierarchy",
          "events": [],
          "instanceDocumentation": ""
        },
        "typeName": "TNode",
        "documentation": "The base type for graphical and potentially interactive objects",
        "events": [],
        "instanceDocumentation": ""
      },
      "typeName": "TBarrierRectangle",
      "documentation": "Shown when a dialog is present, so that clicking on the invisible barrier rectangle will dismiss the dialog",
      "events": [
        "fired"
      ],
      "instanceDocumentation": "",
      "dataStreamOnlyType": true
    }
  }
}